package com.gamegear.firstwingbox2d;

import java.util.HashMap;
import java.util.Map;

import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.Pool;
import com.gamegear.firstwingbox2d.actors.Block;
import com.gamegear.firstwingbox2d.actors.Bob;
import com.gamegear.firstwingbox2d.actors.Bob.State;

public class BobController {

	enum Keys {
		LEFT, RIGHT, JUMP, FIRE, UP, DOWN
	}

	private static final long LONG_JUMP_PRESS 	= 150l;
	private static final float ACCELERATION 	= 2f;
	private static final float MAX_JUMP_SPEED	= 3.5f;
	
	private Bob 	bob;
	private long	jumpPressedTime;
	private boolean jumpingPressed;
	
	static Map<Keys, Boolean> keys = new HashMap<BobController.Keys, Boolean>();
	static {
		keys.put(Keys.LEFT, false);
		keys.put(Keys.RIGHT, false);
		keys.put(Keys.JUMP, false);
		keys.put(Keys.FIRE, false);
		keys.put(Keys.UP, false);
		keys.put(Keys.DOWN, false);
	};
	
	public BobController(Bob bob) {
		this.bob = bob;
	}

	// ** Key presses and touches **************** //
	
	public void leftPressed() {
		keys.get(keys.put(Keys.LEFT, true));
	}
	
	public void rightPressed() {
		keys.get(keys.put(Keys.RIGHT, true));
	}
	
	public void jumpPressed() {
		keys.get(keys.put(Keys.JUMP, true));
	}
	
	public void firePressed() {
		keys.get(keys.put(Keys.FIRE, true));
	}
	
	public void upPressed(){
		keys.get(keys.put(Keys.UP, true));
	}
	
	public void downPressed(){
		keys.get(keys.put(Keys.DOWN, true));
	}
	
	public void leftReleased() {
		keys.get(keys.put(Keys.LEFT, false));
	}
	
	public void rightReleased() {
		keys.get(keys.put(Keys.RIGHT, false));
	}
	
	public void jumpReleased() {
		keys.get(keys.put(Keys.JUMP, false));
		jumpingPressed = false;
	}
	
	public void fireReleased() {
		keys.get(keys.put(Keys.FIRE, false));
	}
	
	public void upReleased() {
		keys.get(keys.put(Keys.UP, false));
	}
	
	public void downReleased() {
		keys.get(keys.put(Keys.DOWN, false));
	}
	
	/** The main update method **/
	public void update(float delta) {
		// Processing the input - setting the states of Bob
		processInput();
		
		// simply updates the state time
		bob.update(delta);
	}

	/** Change Bob's state and parameters based on input controls **/
	private boolean processInput() {
		Body body = bob.getBody();		
		if (keys.get(Keys.LEFT)) {
			// left is pressed
			if (!bob.getState().equals(State.JUMPING)) {
				bob.setState(State.WALKING);
			}
			
			if(body.getLinearVelocity().x > -ACCELERATION){
				body.applyLinearImpulse(-ACCELERATION, 0, body.getPosition().x, body.getPosition().y);
			}
		} else if (keys.get(Keys.RIGHT)) {
			// left is pressed
			if (!bob.getState().equals(State.JUMPING)) {
				bob.setState(State.WALKING);
			}
			
			if(body.getLinearVelocity().x < ACCELERATION){
				body.applyLinearImpulse(ACCELERATION, 0, body.getPosition().x, body.getPosition().y);
			}
		} else if (keys.get(Keys.UP)) {
			
		} else {
			if (!bob.getState().equals(State.JUMPING)) {
				bob.setState(State.IDLE);
			}
			
			body.setLinearVelocity(0, 0);
		}
		
		return false;
	}
}