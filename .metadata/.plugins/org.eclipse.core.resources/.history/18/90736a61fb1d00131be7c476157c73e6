package com.gamegear.firstwingbox2d.actors;

import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.TextureAtlas.AtlasRegion;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
import com.badlogic.gdx.physics.box2d.PolygonShape;
import com.badlogic.gdx.physics.box2d.World;
import com.gamegear.firstwingbox2d.WorldRenderer;

public class Bob extends Actor{

	public enum State {
		IDLE, WALKING, DYING, ACCELERATING, BREAKING, LIFTING, DESCENDING
	}
	
	public static final float SPEED = 4f;	// unit per second
	public static final float SIZE = 0.5f; // half a unit
	private static final float RUNNING_FRAME_DURATION = 0.06f;
	
	Vector2 acceleration = new Vector2();
	Vector2 velocity = new Vector2();
	State state = State.IDLE;
	float stateTime = 0;
	
	private TextureRegion bobIdleLeft;
	private TextureRegion bobIdleRight;
	private TextureRegion bobFrame;
	private TextureRegion bobJumpLeft;
	private TextureRegion bobFallLeft;
	private TextureRegion bobJumpRight;
	private TextureRegion bobFallRight;
	
	private Animation walkLeftAnimation;
	private Animation walkRightAnimation;

	public Bob(Vector2 position, World world) {
		this.bodyDef.position.set(position);
		this.bodyDef.type = BodyType.DynamicBody;
		this.body = world.createBody(bodyDef);
		
		PolygonShape rect = new PolygonShape();
		rect.setAsBox(SIZE / 2, SIZE / 2);
		this.body.createFixture(rect, 0f);
		//this.bodySprite = new Sprite();
		body.setUserData(bodySprite);
		rect.dispose();
	}
	
	public Body getBody(){
		return this.body;
	}

	public Vector2 getAcceleration() {
		return acceleration;
	}

	public Vector2 getVelocity() {
		return velocity;
	}

	public State getState() {
		return state;
	}
	
	public void setState(State newState) {
		this.state = newState;
	}
	
	public float getStateTime(){
		return stateTime;
	}

	public void setPosition(Vector2 position) {
		this.bodyDef.position.set(position);
		this.bounds.setX(position.x);
		this.bounds.setY(position.y);
	}

	public void setAcceleration(Vector2 acceleration) {
		this.acceleration = acceleration;
	}

	public void setVelocity(Vector2 velocity) {
		this.velocity = velocity;
	}

	public void setBounds(Rectangle bounds) {
		this.bounds = bounds;
	}
	
	public void setStateTime(float stateTime) {
		this.stateTime = stateTime;
	}
	
	public void update(float delta) {
		stateTime += delta;
		//position.add(velocity.tmp().mul(delta)); 
	}

	@Override
	protected void loadTextures() {
		bobIdleLeft = WorldRenderer.atlas.findRegion("bob-01");
		bobIdleRight = new TextureRegion(bobIdleLeft);
		bobIdleRight.flip(true, false);
		TextureRegion[] walkLeftFrames = new TextureRegion[5];
		for (int i = 0; i < 5; i++) {
			walkLeftFrames[i] = WorldRenderer.atlas.findRegion("bob-0" + (i + 2));
		}
		walkLeftAnimation = new Animation(RUNNING_FRAME_DURATION, walkLeftFrames);
		TextureRegion[] walkRightFrames = new TextureRegion[5];

		for (int i = 0; i < 5; i++) {
			walkRightFrames[i] = new TextureRegion(walkLeftFrames[i]);
			walkRightFrames[i].flip(true, false);
		}
		
		walkRightAnimation = new Animation(RUNNING_FRAME_DURATION, walkRightFrames);
		bobJumpLeft = WorldRenderer.atlas.findRegion("bob-up");
		bobJumpRight = new TextureRegion(bobJumpLeft);
		bobJumpRight.flip(true, false);
		bobFallLeft = WorldRenderer.atlas.findRegion("bob-down");
		bobFallRight = new TextureRegion(bobFallLeft);
		bobFallRight.flip(true, false);
	}

	@Override
	protected void draw() {
		// TODO Auto-generated method stub
		
	}
}
